name: Provisioning Setup Action
description: Installs signing certificates (.p12) as well as provisioning profiles (.mobileprovision) on macOS runners
author: Will McGinty

inputs:
  profiles:
    description: The list of provisioning profiles to be copied into the appropriate directory, each Base64 encoded. Each profile should be specified on it's own line
    required: false

  signing_certificate:
    description: The signing certificate to be imported into a keychain, Base64 encoded
    required: false

  signing_certificate_password:
    description: The password to the signing certificate 
    required: false

  requires_keychain_creation:
    description: By default, a keychain will only be created if it doesn't already exist. A value of true will fail the action if the specific keychain already exists.
    required: true
    default: false

  keychain_name:
    description: The name for the keychain the signing certificate will be imported into. Defaults to 'provisioning_temporary'.
    required: true
    default: 'provisioning_temporary'

  keychain_password:
    description: The password to unlock the temporary keychain. Will be automatically generated when using the default keychain name
    required: false

outputs:
  keychain_name:
    description: The name of the temporary keychain
    value: ${{ steps.import_certificate.outputs.keychain_name }}

  keychain_password:
    description: The password to unlock the temporary keychain
    value: ${{ steps.import_certificate.outputs.keychain_password }}

runs:
  using: "composite"
  steps:
    - shell: bash
      id: copy_profiles
      if: ${{ inputs.profiles != '' }}
      run: |
        IFS=$'\n'
        profile_list=(${{ inputs.profiles }})

        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        for profile_string in "${profile_list[@]}"; do
          # Remove newline characters from the base64 string
          profile_string=$(echo "$profile_string" | tr -d '\n' | tr -d ' ')
          
          # Decode the base64 string and write it to file in the Provisioning Profiles directory
          md5_hash=$(echo -n "$profile_string" | md5)
          echo -n $profile_string | base64 --decode -o ~/Library/MobileDevice/Provisioning\ Profiles/file-$md5_hash.mobileprovision
        done
  
    - shell: bash
      id: import_certificate
      if: ${{ inputs.signing_certificate != '' && inputs.signing_certificate_password != '' }}
      run: |
        keychain_name="${{ inputs.keychain_name }}.keychain"

        if [[ -n "${{ inputs.keychain_password }}" ]]; then
          keychain_password="${{ inputs.keychain_password }}"
        else
          keychain_password="$(uuidgen)"
        fi

        # Set the name and password as an action output
        echo "keychain_name=$(echo $keychain_name)" >> $GITHUB_OUTPUT
        echo "keychain_password=$(echo $keychain_password)" >> $GITHUB_OUTPUT

        # Check if the keychain already exists
        existing_keychain=$(security list-keychains | grep -Eo "/.*$keychain_name")

        if [[ -z "$existing_keychain" ]]; then
          security create-keychain -p "$keychain_password" "$keychain_name"
        else
          if [ "${{ inputs.requires_keychain_creation }}" = true ]; then
            echo "The keychain $keychain_name already exists and keychain creation was required."
            exit 1
          fi
        fi

        # Set the keychain as the default keychain
        security default-keychain -s "$keychain_name"

        # Unlock the keychain
        security unlock-keychain -p "$keychain_password" "$keychain_name"

        # Import the signing certificate
        base64 --decode <<< "${{ inputs.signing_certificate }}" > $RUNNER_TEMP/certificate.p12
        security import $RUNNER_TEMP/certificate.p12 -k "$keychain_name" -P "${{ inputs.signing_certificate_password }}" -T /usr/bin/codesign

        # Set the Key Partition List
        security set-key-partition-list -S apple-tool:,apple: -s -k "$keychain_password" "$keychain_name"